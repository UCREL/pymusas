"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[43],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),k=r,c=d["".concat(o,".").concat(k)]||d[k]||m[k]||l;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9941:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],s={},o=void 0,u={unversionedId:"api/taggers/rule_based",id:"api/taggers/rule_based",title:"rule_based",description:"pymusas.taggers.rule_based",source:"@site/docs/api/taggers/rule_based.md",sourceDirName:"api/taggers",slug:"/api/taggers/rule_based",permalink:"/pymusas/api/taggers/rule_based",editUrl:"https://github.com/ucrel/pymusas/edit/main/docs/docs/api/taggers/rule_based.md",tags:[],version:"current",lastUpdatedBy:"Paul Rayson",lastUpdatedAt:1724054083,formattedLastUpdatedAt:"8/19/2024",frontMatter:{},sidebar:"api",previous:{title:"rules",permalink:"/pymusas/api/spacy_api/taggers/rules"},next:{title:"mwe",permalink:"/pymusas/api/taggers/rules/mwe"}},p=[{value:"RuleBasedTagger",id:"rulebasedtagger",children:[{value:"__call__",id:"__call__",children:[],level:3}],level:2}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"source-div"},(0,l.kt)("p",null,(0,l.kt)("i",null,"pymusas"),(0,l.kt)("i",null,".taggers"),(0,l.kt)("strong",null,".rule_based")),(0,l.kt)("p",null,(0,l.kt)("a",{className:"sourcelink",href:"https://github.com/UCREL/pymusas/blob/main/pymusas/taggers/rule_based.py"},"[SOURCE]"))),(0,l.kt)("div",null),(0,l.kt)("hr",null),(0,l.kt)("a",{id:"pymusas.taggers.rule_based.RuleBasedTagger"}),(0,l.kt)("h2",{id:"rulebasedtagger"},"RuleBasedTagger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger:\n | ...\n | def __init__(\n |     self,\n |     rules: List[Rule],\n |     ranker: LexiconEntryRanker,\n |     default_punctuation_tags: Optional[Set[str]] = None,\n |     default_number_tags: Optional[Set[str]] = None\n | ) -> None\n")),(0,l.kt)("p",null,"The tagger when called, through ",(0,l.kt)("a",{parentName:"p",href:"#__call__"},(0,l.kt)("inlineCode",{parentName:"a"},"__call__")),", and given a sequence of\ntokens and their associated lingustic data (lemma, Part Of Speech (POS))\nwill apply one or more ",(0,l.kt)("a",{parentName:"p",href:"/pymusas/api/taggers/rules/rule/#rule"},(0,l.kt)("inlineCode",{parentName:"a"},"pymusas.taggers.rules.rule.Rule")),"s\nto create a list of possible candidate tags for each token in the sequence.\nEach candidate, represented as a\n",(0,l.kt)("a",{parentName:"p",href:"/pymusas/api/rankers/ranking_meta_data/#rankingmetadata"},(0,l.kt)("inlineCode",{parentName:"a"},"pymusas.rankers.ranking_meta_data.RankingMetaData"))," object, for each\ntoken is then Ranked using a\n",(0,l.kt)("a",{parentName:"p",href:"/pymusas/api/rankers/lexicon_entry/#lexiconentryranker"},(0,l.kt)("inlineCode",{parentName:"a"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker"))," ranker. The best\ncandidate and it's associated tag(s) for each token are then returned along\nwith a ",(0,l.kt)("inlineCode",{parentName:"p"},"List")," of token indexes indicating if the token is part of a Multi\nWord Expression (MWE)."),(0,l.kt)("p",null,"If we cannot tag a token then the following process will happen:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"If the token's POS tag is in ",(0,l.kt)("inlineCode",{parentName:"li"},"default_punctuation_tags")," then it will assign the\ntag ",(0,l.kt)("inlineCode",{parentName:"li"},"PUNCT"),"."),(0,l.kt)("li",{parentName:"ol"},"If the token's POS tag is in ",(0,l.kt)("inlineCode",{parentName:"li"},"default_number_tags")," then it will assign the tag\n",(0,l.kt)("inlineCode",{parentName:"li"},"N1"),"."),(0,l.kt)("li",{parentName:"ol"},"Assign the default tag ",(0,l.kt)("inlineCode",{parentName:"li"},"Z99"),".")),(0,l.kt)("h4",{id:"rulebasedtagger.parameters"},"Parameters",(0,l.kt)("a",{className:"headerlink",href:"#rulebasedtagger.parameters",title:"Permanent link"},"\xb6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rules")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"List[pymusas.taggers.rules.rule.Rule]")," ",(0,l.kt)("br",null),"\nA list of rules to apply to the sequence of tokens in the\n",(0,l.kt)("a",{parentName:"li",href:"#__call__"},(0,l.kt)("inlineCode",{parentName:"a"},"__call__")),". The output from each rule is concatendated and given\nto the ",(0,l.kt)("inlineCode",{parentName:"li"},"ranker"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ranker")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker")," ",(0,l.kt)("br",null),"\nA ranker to rank the output from all of the ",(0,l.kt)("inlineCode",{parentName:"li"},"rules"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"default","_","punctuation","_","tags")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"Set[str]"),", optional (default = ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,l.kt)("br",null),"\nThe POS tags that represent punctuation. If ",(0,l.kt)("inlineCode",{parentName:"li"},"None")," then we will use\nthe ",(0,l.kt)("inlineCode",{parentName:"li"},"Set"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"set(['punc'])"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"default","_","number","_","tags")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"Set[str]"),", optional (default = ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,l.kt)("br",null),"\nThe POS tags that represent numbers. If ",(0,l.kt)("inlineCode",{parentName:"li"},"None")," then we will use\nthe ",(0,l.kt)("inlineCode",{parentName:"li"},"Set"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"set(['num'])"),".")),(0,l.kt)("h4",{id:"rulebasedtagger.instance_attributes"},"Instance Attributes",(0,l.kt)("a",{className:"headerlink",href:"#rulebasedtagger.instance_attributes",title:"Permanent link"},"\xb6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rules")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"List[pymusas.taggers.rules.rule.Rule]")," ",(0,l.kt)("br",null),"\nThe given ",(0,l.kt)("inlineCode",{parentName:"li"},"rules"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ranker")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker")," ",(0,l.kt)("br",null),"\nThe given ",(0,l.kt)("inlineCode",{parentName:"li"},"ranker"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"default","_","punctuation","_","tags")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"Set[str]")," ",(0,l.kt)("br",null),"\nThe given ",(0,l.kt)("inlineCode",{parentName:"li"},"default_punctuation_tags")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"default","_","number","_","tags")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"Set[str]")," ",(0,l.kt)("br",null),"\nThe given ",(0,l.kt)("inlineCode",{parentName:"li"},"default_number_tags"))),(0,l.kt)("h4",{id:"rulebasedtagger.examples"},"Examples",(0,l.kt)("a",{className:"headerlink",href:"#rulebasedtagger.examples",title:"Permanent link"},"\xb6")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pymusas.lexicon_collection import LexiconCollection\nfrom pymusas.taggers.rule_based import RuleBasedTagger\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.pos_mapper import BASIC_CORCENCC_TO_USAS_CORE\nwelsh_lexicon_url = 'https://raw.githubusercontent.com/apmoore1/Multilingual-USAS/master/Welsh/semantic_lexicon_cy.tsv'\nlexicon_lookup = LexiconCollection.from_tsv(welsh_lexicon_url, include_pos=True)\nlemma_lexicon_lookup = LexiconCollection.from_tsv(welsh_lexicon_url, include_pos=False)\nsingle_word_rule = SingleWordRule(lexicon_lookup, lemma_lexicon_lookup,\n                                  BASIC_CORCENCC_TO_USAS_CORE)\nranker = ContextualRuleBasedRanker(1, 0)\ntagger = RuleBasedTagger([single_word_rule], ranker)\n")),(0,l.kt)("a",{id:"pymusas.taggers.rule_based.RuleBasedTagger.__call__"}),(0,l.kt)("h3",{id:"__call__"},"_","_","call","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger:\n | ...\n | def __call__(\n |     self,\n |     tokens: List[str],\n |     lemmas: List[str],\n |     pos_tags: List[str]\n | ) -> List[Tuple[List[str],\n |                                                     List[Tuple[int, int]]\n |                                                     ]]\n")),(0,l.kt)("p",null,"Given a ",(0,l.kt)("inlineCode",{parentName:"p"},"List")," of tokens, their associated lemmas and\nPart Of Speech (POS) tags it returns for each token:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"List")," of tags. The first tag in the ",(0,l.kt)("inlineCode",{parentName:"li"},"List")," of tags is the most likely tag."),(0,l.kt)("li",{parentName:"ol"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"List")," of ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuples")," whereby each ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," indicates the start and end\ntoken index of the associated Multi Word Expression (MWE). If the ",(0,l.kt)("inlineCode",{parentName:"li"},"List")," contains\nmore than one ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," then the MWE is discontinuous. For single word\nexpressions the ",(0,l.kt)("inlineCode",{parentName:"li"},"List")," will only contain 1 ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," which will be\n(token_start_index, token_start_index + 1).")),(0,l.kt)("p",null,"All the generated tags and MWEs are based on the rules and ranker given\nto this model."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE")," this tagger has been designed to be flexible with the amount of\nresources avaliable, if you do not have POS or lemma information assign\nthem a ",(0,l.kt)("inlineCode",{parentName:"p"},"List")," of empty strings."),(0,l.kt)("h4",{id:"__call__.parameters"},"Parameters",(0,l.kt)("a",{className:"headerlink",href:"#__call__.parameters",title:"Permanent link"},"\xb6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"tokens")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"List[str]")," ",(0,l.kt)("br",null),"\nA List of full text form of the tokens to be tagged."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"lemmas")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"List[str]")," ",(0,l.kt)("br",null),"\nThe List of lemma/base form of the tokens to be tagged."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"pos","_","tags")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"List[str]")," ",(0,l.kt)("br",null),"\nThe List of POS tags of the tokens to be tagged.")),(0,l.kt)("h4",{id:"__call__.returns"},"Returns",(0,l.kt)("a",{className:"headerlink",href:"#__call__.returns",title:"Permanent link"},"\xb6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List[Tuple[List[str], List[Tuple[int, int]]]]")," ",(0,l.kt)("br",null))),(0,l.kt)("h4",{id:"__call__.raises"},"Raises",(0,l.kt)("a",{className:"headerlink",href:"#__call__.raises",title:"Permanent link"},"\xb6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ValueError")," ",(0,l.kt)("br",null),"\nIf the length of the ",(0,l.kt)("inlineCode",{parentName:"li"},"tokens"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"lemmas"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"pos_tags")," are not of\nthe same legnth.")))}d.isMDXComponent=!0}}]);