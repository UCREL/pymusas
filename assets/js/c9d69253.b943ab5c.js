"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[615],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),m=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=m(t),k=a,g=d["".concat(o,".").concat(k)]||d[k]||p[k]||i;return t?r.createElement(g,l(l({ref:n},u),{},{components:t})):r.createElement(g,l({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var m=2;m<i;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8170:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return m},toc:function(){return u},default:function(){return d}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),l=["components"],s={},o=void 0,m={unversionedId:"api/taggers/rules/util",id:"api/taggers/rules/util",title:"util",description:"pymusas.taggers.rules.util",source:"@site/docs/api/taggers/rules/util.md",sourceDirName:"api/taggers/rules",slug:"/api/taggers/rules/util",permalink:"/pymusas/api/taggers/rules/util",editUrl:"https://github.com/ucrel/pymusas/edit/main/docs/docs/api/taggers/rules/util.md",tags:[],version:"current",lastUpdatedBy:"Paul Rayson",lastUpdatedAt:1651672020,formattedLastUpdatedAt:"5/4/2022",frontMatter:{},sidebar:"api",previous:{title:"single_word",permalink:"/pymusas/api/taggers/rules/single_word"}},u=[{value:"n_gram_indexes",id:"n_gram_indexes",children:[],level:3},{value:"n_grams",id:"n_grams",children:[],level:3}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"source-div"},(0,i.kt)("p",null,(0,i.kt)("i",null,"pymusas"),(0,i.kt)("i",null,".taggers"),(0,i.kt)("i",null,".rules"),(0,i.kt)("strong",null,".util")),(0,i.kt)("p",null,(0,i.kt)("a",{className:"sourcelink",href:"https://github.com/UCREL/pymusas/blob/main/pymusas/taggers/rules/util.py"},"[SOURCE]"))),(0,i.kt)("div",null),(0,i.kt)("hr",null),(0,i.kt)("a",{id:"pymusas.taggers.rules.util.n_gram_indexes"}),(0,i.kt)("h3",{id:"n_gram_indexes"},"n","_","gram","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def n_gram_indexes(\n    sequence: Sequence[Any],\n    min_n: int,\n    max_n: int\n) -> Iterator[Tuple[int, int]]\n")),(0,i.kt)("p",null,"Returns n-grams as indexes of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence"),",\nin the range from ",(0,i.kt)("inlineCode",{parentName:"p"},"max_n")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"min_n"),", in\norder of largest n-grams first. If you only want one n-gram size then set\n",(0,i.kt)("inlineCode",{parentName:"p"},"min_n")," equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"max_n"),", for example to get bi-grams indexes set both\n",(0,i.kt)("inlineCode",{parentName:"p"},"min_n")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"max_n")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("h4",{id:"n_gram_indexes.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#n_gram_indexes.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sequence")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Sequence[Any]")," ",(0,i.kt)("br",null),"\nThe sequence to generate n-gram indexes from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"min","_","n")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("br",null),"\nMinimum size n-gram. Has to be greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"max","_","n")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("br",null),"\nMaximim size n-gram. This has to be equal to or greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n"),".\nIf this is greater than the length of the ",(0,i.kt)("inlineCode",{parentName:"li"},"sequence")," then it is set to\nlength of the ",(0,i.kt)("inlineCode",{parentName:"li"},"sequence"),".")),(0,i.kt)("h4",{id:"n_gram_indexes.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#n_gram_indexes.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Iterator[Tuple[int, int]]")," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"n_gram_indexes.raises"},"Raises",(0,i.kt)("a",{className:"headerlink",href:"#n_gram_indexes.raises",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ValueError")," ",(0,i.kt)("br",null),"\nIf ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n")," is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"max_n")," is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n"),".")),(0,i.kt)("h4",{id:"n_gram_indexes.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#n_gram_indexes.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pymusas.taggers.rules.util import n_gram_indexes\ntokens = ['hello', 'how', 'are', 'you', ',']\ntoken_n_gram_indexes = n_gram_indexes(tokens, 2, 3)\nexpected_n_grams_indexes = [(0, 3), (1, 4), (2, 5), (0, 2), (1, 3), (2, 4), (3, 5)]\nassert expected_n_grams_indexes == list(token_n_gram_indexes)\n")),(0,i.kt)("a",{id:"pymusas.taggers.rules.util.n_grams"}),(0,i.kt)("h3",{id:"n_grams"},"n","_","grams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def n_grams(\n    sequence: Sequence[Any],\n    min_n: int,\n    max_n: int\n) -> Iterator[Sequence[Any]]\n")),(0,i.kt)("p",null,"Returns n-grams, in the range from ",(0,i.kt)("inlineCode",{parentName:"p"},"max_n")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"min_n"),", of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence")," in\norder of largest n-grams first. If you only want one n-gram size then set\n",(0,i.kt)("inlineCode",{parentName:"p"},"min_n")," equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"max_n"),", for example to get bi-grams set both ",(0,i.kt)("inlineCode",{parentName:"p"},"min_n")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"max_n")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("h4",{id:"n_grams.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#n_grams.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sequence")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Sequence[Any]")," ",(0,i.kt)("br",null),"\nThe sequence to generate n-grams from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"min","_","n")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("br",null),"\nMinimum size n-gram. Has to be greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"max","_","n")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("br",null),"\nMaximim size n-gram. This has to be equal to or greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n"),".\nIf this is greater than the length of the ",(0,i.kt)("inlineCode",{parentName:"li"},"sequence")," then it is set to\nlength of the ",(0,i.kt)("inlineCode",{parentName:"li"},"sequence"),".")),(0,i.kt)("h4",{id:"n_grams.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#n_grams.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Iterator[Sequence[Any]]")," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"n_grams.raises"},"Raises",(0,i.kt)("a",{className:"headerlink",href:"#n_grams.raises",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ValueError")," ",(0,i.kt)("br",null),"\nIf ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n")," is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"max_n")," is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"min_n"),".")),(0,i.kt)("h4",{id:"n_grams.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#n_grams.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pymusas.taggers.rules.util import n_grams\ntokens = ['hello', 'how', 'are', 'you', ',']\ntoken_n_grams = n_grams(tokens, 2, 3)\nexpected_n_grams = [['hello', 'how', 'are'], ['how', 'are', 'you'], ['are', 'you', ','],\n                    ['hello', 'how'], ['how', 'are'], ['are', 'you'], ['you', ',']]\nassert expected_n_grams == list(token_n_grams)\n")))}d.isMDXComponent=!0}}]);