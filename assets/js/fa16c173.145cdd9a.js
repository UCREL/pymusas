"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[221],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),k=r,g=d["".concat(o,".").concat(k)]||d[k]||m[k]||i;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5167:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var n=a(3117),r=a(102),i=(a(7294),a(3905)),l=["components"],s={},o=void 0,p={unversionedId:"api/spacy_api/taggers/rule_based",id:"api/spacy_api/taggers/rule_based",title:"rule_based",description:"pymusas.spacyapi.taggers.rulebased",source:"@site/docs/api/spacy_api/taggers/rule_based.md",sourceDirName:"api/spacy_api/taggers",slug:"/api/spacy_api/taggers/rule_based",permalink:"/pymusas/api/spacy_api/taggers/rule_based",editUrl:"https://github.com/ucrel/pymusas/edit/main/docs/docs/api/spacy_api/taggers/rule_based.md",tags:[],version:"current",lastUpdatedBy:"Andrew Moore",lastUpdatedAt:1651674780,formattedLastUpdatedAt:"5/4/2022",frontMatter:{},sidebar:"api",previous:{title:"utils",permalink:"/pymusas/api/spacy_api/utils"},next:{title:"rules",permalink:"/pymusas/api/spacy_api/taggers/rules"}},u=[{value:"RuleBasedTagger",id:"rulebasedtagger",children:[{value:"COMPONENT_NAME",id:"component_name",children:[],level:4},{value:"initialize",id:"initialize",children:[],level:3},{value:"__call__",id:"__call__",children:[],level:3},{value:"to_bytes",id:"to_bytes",children:[],level:3},{value:"from_bytes",id:"from_bytes",children:[],level:3},{value:"to_disk",id:"to_disk",children:[],level:3},{value:"from_disk",id:"from_disk",children:[],level:3}],level:2}],m={toc:u};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"source-div"},(0,i.kt)("p",null,(0,i.kt)("i",null,"pymusas"),(0,i.kt)("i",null,".spacy_api"),(0,i.kt)("i",null,".taggers"),(0,i.kt)("strong",null,".rule_based")),(0,i.kt)("p",null,(0,i.kt)("a",{className:"sourcelink",href:"https://github.com/UCREL/pymusas/blob/main/pymusas/spacy_api/taggers/rule_based.py"},"[SOURCE]"))),(0,i.kt)("div",null),(0,i.kt)("hr",null),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger"}),(0,i.kt)("h2",{id:"rulebasedtagger"},"RuleBasedTagger"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def __init__(\n |     self,\n |     name: str = 'pymusas_rule_based_tagger',\n |     pymusas_tags_token_attr: str = 'pymusas_tags',\n |     pymusas_mwe_indexes_attr: str = 'pymusas_mwe_indexes',\n |     pos_attribute: str = 'pos_',\n |     lemma_attribute: str = 'lemma_'\n | ) -> None\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://spacy.io/usage/processing-pipelines"},"spaCy pipeline component"),"\nof the ",(0,i.kt)("a",{parentName:"p",href:"/pymusas/api/taggers/rule_based/#rulebasedtagger"},(0,i.kt)("inlineCode",{parentName:"a"},"pymusas.taggers.rule_based.RuleBasedTagger")),"."),(0,i.kt)("p",null,"This component applies one or more ",(0,i.kt)("a",{parentName:"p",href:"/pymusas/api/taggers/rules/rule/#rule"},(0,i.kt)("inlineCode",{parentName:"a"},"pymusas.taggers.rules.rule.Rule")),"s\nto create a list of possible candidate tags for each token in the sequence.\nEach candidate, represented as a\n",(0,i.kt)("a",{parentName:"p",href:"/pymusas/api/rankers/ranking_meta_data/#rankingmetadata"},(0,i.kt)("inlineCode",{parentName:"a"},"pymusas.rankers.ranking_meta_data.RankingMetaData"))," object, for each\ntoken is then Ranked using a\n",(0,i.kt)("a",{parentName:"p",href:"/pymusas/api/rankers/lexicon_entry/#lexiconentryranker"},(0,i.kt)("inlineCode",{parentName:"a"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker"))," ranker. The best\ncandidate and it's associated tag(s) for each token are then assigned to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Token._.pymusas_tags")," attribute in addition a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," of token indexes\nindicating if the token is part of a Multi Word Expression (MWE) is assigned\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"Token._.pymusas_mwe_indexes"),"."),(0,i.kt)("p",null,"If we cannot tag a token then the following process will happen:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If the token's POS tag is in ",(0,i.kt)("inlineCode",{parentName:"li"},"default_punctuation_tags")," then it will assign the\ntag ",(0,i.kt)("inlineCode",{parentName:"li"},"PUNCT"),"."),(0,i.kt)("li",{parentName:"ol"},"If the token's POS tag is in ",(0,i.kt)("inlineCode",{parentName:"li"},"default_number_tags")," then it will assign the tag\n",(0,i.kt)("inlineCode",{parentName:"li"},"N1"),"."),(0,i.kt)("li",{parentName:"ol"},"Assign the default tag ",(0,i.kt)("inlineCode",{parentName:"li"},"Z99"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE")," this tagger has been designed to be flexible with the amount of\nresources avaliable, for example if you do not have a POS tagger or\nlemmatiser in your spaCy pipeline this ok, just use the default\n",(0,i.kt)("inlineCode",{parentName:"p"},"pos_attribute")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lemma_attribute"),"."),(0,i.kt)("h4",{id:"rulebasedtagger.assigned_attributes"},"Assigned Attributes",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.assigned_attributes",title:"Permanent link"},"\xb6")),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("th",null," Location "),(0,i.kt)("th",null," Type "),(0,i.kt)("th",null," Value ")),(0,i.kt)("tr",null,(0,i.kt)("td",null," Token._.pymusas_tags "),(0,i.kt)("td",null," `List[str]` "),(0,i.kt)("td",null," Prediced tags, the first tag in the List of tags is the most likely tag. ")),(0,i.kt)("tr",null,(0,i.kt)("td",null," Token._.pymusas_mwe_indexes "),(0,i.kt)("td",null," `List[Tuple[int, int]]` "),(0,i.kt)("td",null," Each `Tuple` indicates the start and end token index of the associated Multi Word Expression (MWE). If the `List` contains more than one `Tuple` then the MWE is discontinuous. For single word expressions the `List` will only contain 1 `Tuple` which will be (token_start_index, token_start_index + 1)."))),(0,i.kt)("h4",{id:"rulebasedtagger.config_and_implementation"},"Config and implementation",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.config_and_implementation",title:"Permanent link"},"\xb6")),(0,i.kt)("p",null,"The default config is defined by the pipeline component factory and describes\nhow the component should be configured. You can override its settings via the ",(0,i.kt)("inlineCode",{parentName:"p"},"config"),"\nargument on ",(0,i.kt)("a",{parentName:"p",href:"https://spacy.io/api/language#add_pipe"},"nlp.add_pipe")," or in your\n",(0,i.kt)("a",{parentName:"p",href:"https://spacy.io/usage/training#config"},"config.cfg for training"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Setting"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"pymusas_tags_token_attr"),(0,i.kt)("td",{parentName:"tr",align:null},"See parameters section below")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"pymusas_mwe_indexes_attr"),(0,i.kt)("td",{parentName:"tr",align:null},"See parameters section below")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"pos_attribute"),(0,i.kt)("td",{parentName:"tr",align:null},"See parameters section below")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"lemma_attribute"),(0,i.kt)("td",{parentName:"tr",align:null},"See parameters section below")))),(0,i.kt)("h4",{id:"rulebasedtagger.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"name")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_rule_based_tagger"),") ",(0,i.kt)("br",null),"\nThe component name. Defaults to the same name as the class variable\n",(0,i.kt)("inlineCode",{parentName:"li"},"COMPONENT_NAME"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pymusas","_","tags","_","token","_","attr")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_tags"),") ",(0,i.kt)("br",null),"\nThe name of the attribute to assign the predicted tags too under\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"Token._")," class."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pymusas","_","mwe","_","indexes","_","attr")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_mwe_indexes"),") ",(0,i.kt)("br",null),"\nThe name of the attribute to assign the start and end token index of the\nassociated MWE too under the ",(0,i.kt)("inlineCode",{parentName:"li"},"Token._")," class."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pos","_","attribute")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pos_"),") ",(0,i.kt)("br",null),"\nThe name of the attribute that the Part Of Speech (POS) tag is assigned too\nwithin the ",(0,i.kt)("inlineCode",{parentName:"li"},"Token")," class. The POS tag value that comes from this attribute\nhas to be of type ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),". With the current default we take the POS tag\nfrom ",(0,i.kt)("inlineCode",{parentName:"li"},"Token.pos_"),". The POS tag can be an empty string if you do not require\nPOS information or if you do not have a POS tagger. ",(0,i.kt)("strong",{parentName:"li"},"NOTE")," that if you\ndo not have a POS tagger the default value for ",(0,i.kt)("inlineCode",{parentName:"li"},"Token.pos_")," is an empty\nstring."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"lemma","_","attribute")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"lemma_"),") ",(0,i.kt)("br",null),"\nThe name of the attribute that the lemma is assigned too within the ",(0,i.kt)("inlineCode",{parentName:"li"},"Token"),"\nclass. The lemma value that comes from this attribute has to be of\ntype ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),". With the current default we take the lemma from ",(0,i.kt)("inlineCode",{parentName:"li"},"Token.lemma_"),".\nThe lemma can be an empty string if you do not require\nlemma information or if you do not have a lemmatiser. ",(0,i.kt)("strong",{parentName:"li"},"NOTE")," that if you\ndo not have a lemmatiser the default value for ",(0,i.kt)("inlineCode",{parentName:"li"},"Token.lemma_")," is an empty\nstring.")),(0,i.kt)("h4",{id:"rulebasedtagger.instance_attributes"},"Instance Attributes",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.instance_attributes",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"name")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," ",(0,i.kt)("br",null),"\nThe component name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"rules")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"List[pymusas.taggers.rules.rule.Rule]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,i.kt)("br",null),"\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"rules")," is set through the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method. Before it is\nset by the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method the value of this attribute is ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ranker")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,i.kt)("br",null),"\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"ranker")," is set through the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method. Before it is\nset by the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method the value of this attribute is ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"default","_","punctuation","_","tags")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Set[str]")," ",(0,i.kt)("br",null),"\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"default_punctuation_tags")," is set through the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"default","_","number","_","tags")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Set[str]")," ",(0,i.kt)("br",null),"\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"default_number_tags")," is set through the ",(0,i.kt)("a",{parentName:"li",href:"#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize"))," method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pymusas","_","tags","_","token","_","attr")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_tags"),") ",(0,i.kt)("br",null),"\nThe given ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_tags_token_attr")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pymusas","_","mwe","_","indexes","_","attr")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_mwe_indexes"),") ",(0,i.kt)("br",null),"\nThe given ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas_mwe_indexes_attr")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pos","_","attribute")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"pos_"),") ",(0,i.kt)("br",null),"\nThe given ",(0,i.kt)("inlineCode",{parentName:"li"},"pos_attribute")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"lemma","_","attribute")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"lemma_"),") ",(0,i.kt)("br",null),"\nThe given ",(0,i.kt)("inlineCode",{parentName:"li"},"lemma_attribute"))),(0,i.kt)("h4",{id:"rulebasedtagger.class_attributes"},"Class Attributes",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.class_attributes",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"COMPONENT","_","NAME")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," ",(0,i.kt)("br",null),"\nName of component factory that this component is registered under. This\nis used as the first argument to\n",(0,i.kt)("a",{parentName:"li",href:"https://spacy.io/api/language#add_pipe"},(0,i.kt)("inlineCode",{parentName:"a"},"Language.add_pipe")),"\nif you want to add this component to your spaCy pipeline.")),(0,i.kt)("h4",{id:"rulebasedtagger.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#rulebasedtagger.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import spacy\nfrom pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.pos_mapper import BASIC_CORCENCC_TO_USAS_CORE\nfrom pymusas.lexicon_collection import LexiconCollection\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.spacy_api.taggers.rule_based import RuleBasedTagger\n# Construction via spaCy pipeline\nnlp = spacy.blank('en')\n# Using default config\nsingle_lexicon_url = 'https://raw.githubusercontent.com/UCREL/Multilingual-USAS/master/Welsh/semantic_lexicon_cy.tsv'\nsingle_lexicon = LexiconCollection.from_tsv(single_lexicon_url)\nsingle_lemma_lexicon = LexiconCollection.from_tsv(single_lexicon_url,\n                                                  include_pos=False)\nsingle_rule = SingleWordRule(single_lexicon, single_lemma_lexicon,\n                             pos_mapper=BASIC_CORCENCC_TO_USAS_CORE)\nrules = [single_rule]\nranker = ContextualRuleBasedRanker(*ContextualRuleBasedRanker.get_construction_arguments(rules))\ntagger = nlp.add_pipe('pymusas_rule_based_tagger')\ntagger.rules = rules\ntagger.ranker = ranker\ntoken = nlp('aberth')\nassert token[0]._.pymusas_tags == ['S9', 'A9-']\nassert token[0]._.pymusas_mwe_indexes == [(0, 1)]\n# Custom config\ncustom_config = {'pymusas_tags_token_attr': 'semantic_tags',\n                 'pymusas_mwe_indexes_attr': 'mwe_indexes'}\nnlp = spacy.blank('en')\ntagger = nlp.add_pipe('pymusas_rule_based_tagger', config=custom_config)\ntagger.rules = rules\ntagger.ranker = ranker\ntoken = nlp('aberth')\nassert token[0]._.semantic_tags == ['S9', 'A9-']\nassert token[0]._.mwe_indexes == [(0, 1)]\n")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.COMPONENT_NAME"}),(0,i.kt)("h4",{id:"component_name"},"COMPONENT","_","NAME"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | COMPONENT_NAME = 'pymusas_rule_based_tagger'\n")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.initialize"}),(0,i.kt)("h3",{id:"initialize"},"initialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def initialize(\n |     self,\n |     get_examples: Optional[Callable[[], Iterable[Example]]] = None,\n |     *,\n |     nlp: Optional[Language] = None,\n |     rules: Optional[List[Rule]] = None,\n |     ranker: Optional[LexiconEntryRanker] = None,\n |     default_punctuation_tags: Optional[List[str]] = None,\n |     default_number_tags: Optional[List[str]] = None\n | ) -> None\n")),(0,i.kt)("p",null,"Initialize the tagger and load any of the resources given. The method is\ntypically called by\n",(0,i.kt)("a",{parentName:"p",href:"https://spacy.io/api/language#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"Language.initialize")),"\nand lets you customize arguments it receives via the\n",(0,i.kt)("a",{parentName:"p",href:"https://spacy.io/api/data-formats#config-initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"initialize.components")),"\nblock in the config. The loading only happens during initialization,\ntypically before training. At runtime, all data is load from disk."),(0,i.kt)("h4",{id:"initialize.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#initialize.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"rules")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"List[pymusas.taggers.rules.rule.Rule]")," ",(0,i.kt)("br",null),"\nA list of rules to apply to the sequence of tokens in the\n",(0,i.kt)("a",{parentName:"li",href:"#__call__"},(0,i.kt)("inlineCode",{parentName:"a"},"__call__")),". The output from each rule is concatendated and given\nto the ",(0,i.kt)("inlineCode",{parentName:"li"},"ranker"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ranker")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"pymusas.rankers.lexicon_entry.LexiconEntryRanker")," ",(0,i.kt)("br",null),"\nA ranker to rank the output from all of the ",(0,i.kt)("inlineCode",{parentName:"li"},"rules"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"default","_","punctuation","_","tags")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"List[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,i.kt)("br",null),"\nThe POS tags that represent punctuation. If ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," then we will use\n",(0,i.kt)("inlineCode",{parentName:"li"},"['punc']"),". The list will be converted into a ",(0,i.kt)("inlineCode",{parentName:"li"},"Set")," before assigning\nto the ",(0,i.kt)("inlineCode",{parentName:"li"},"default_punctuation_tags")," attribute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"default","_","number","_","tags")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"List[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),") ",(0,i.kt)("br",null),"\nThe POS tags that represent numbers. If ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," then we will use\n",(0,i.kt)("inlineCode",{parentName:"li"},"['num']"),". The list will be converted into a ",(0,i.kt)("inlineCode",{parentName:"li"},"Set")," before assigning\nto the ",(0,i.kt)("inlineCode",{parentName:"li"},"default_number_tags")," attribute.")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.__call__"}),(0,i.kt)("h3",{id:"__call__"},"_","_","call","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def __call__(doc: Doc) -> Doc\n")),(0,i.kt)("p",null,"Applies the tagger to the spaCy document, modifies it in place, and\nreturns it. This usually happens under the hood when the ",(0,i.kt)("inlineCode",{parentName:"p"},"nlp")," object is\ncalled on a text and all pipeline components are applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Doc")," in\norder."),(0,i.kt)("h4",{id:"__call__.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#__call__.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"doc")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Doc")," ",(0,i.kt)("br",null),"\nA ",(0,i.kt)("a",{parentName:"li",href:"https://spacy.io/api/doc"},"spaCy ",(0,i.kt)("inlineCode",{parentName:"a"},"Doc")))),(0,i.kt)("h4",{id:"__call__.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#__call__.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Doc")," ",(0,i.kt)("br",null))),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.to_bytes"}),(0,i.kt)("h3",{id:"to_bytes"},"to","_","bytes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def to_bytes(\n |     self,\n |     *,\n |     exclude: Iterable[str] = SimpleFrozenList()\n | ) -> bytes\n")),(0,i.kt)("p",null,"Serialises the tagger to a bytestring."),(0,i.kt)("h4",{id:"to_bytes.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#to_bytes.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"exclude")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Iterable[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"SimpleFrozenList()"),") ",(0,i.kt)("br",null),"\nThis currently does not do anything, please ignore it.")),(0,i.kt)("h4",{id:"to_bytes.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#to_bytes.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"to_bytes.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#to_bytes.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.spacy_api.taggers.rule_based import RuleBasedTagger\nrules = [SingleWordRule({'example|noun': ['Z1']}, {})]\nranker = ContextualRuleBasedRanker(*ContextualRuleBasedRanker.get_construction_arguments(rules))\ntagger = RuleBasedTagger()\ntagger.initialize(rules=rules, ranker=ranker)\ntagger_bytes = tagger.to_bytes()\n")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.from_bytes"}),(0,i.kt)("h3",{id:"from_bytes"},"from","_","bytes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def from_bytes(\n |     self,\n |     bytes_data: bytes,\n |     *,\n |     exclude: Iterable[str] = SimpleFrozenList()\n | ) -> "RuleBasedTagger"\n')),(0,i.kt)("p",null,"Loads the tagger from the given bytestring in place and returns it."),(0,i.kt)("h4",{id:"from_bytes.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#from_bytes.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"bytes","_","data")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," ",(0,i.kt)("br",null),"\nThe bytestring to load."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"exclude")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Iterable[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"li"},"SimpleFrozenList()"),") ",(0,i.kt)("br",null),"\nThis currently does not do anything, please ignore it.")),(0,i.kt)("h4",{id:"from_bytes.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#from_bytes.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rulebasedtagger"},(0,i.kt)("inlineCode",{parentName:"a"},"RuleBasedTagger"))," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"from_bytes.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#from_bytes.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.spacy_api.taggers.rule_based import RuleBasedTagger\nrules = [SingleWordRule({'example|noun': ['Z1']}, {})]\nranker = ContextualRuleBasedRanker(*ContextualRuleBasedRanker.get_construction_arguments(rules))\ntagger = RuleBasedTagger()\ntagger.initialize(rules=rules, ranker=ranker)\n# Create a new tagger, tagger 2\ntagger_2 = RuleBasedTagger()\n# Show that it is not the same as the original tagger\nassert tagger_2.rules != rules\n# Tagger 2 will now load in the data from the original tagger\n_ = tagger_2.from_bytes(tagger.to_bytes())\nassert tagger_2.rules == rules\nassert tagger_2.ranker == ranker\n")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.to_disk"}),(0,i.kt)("h3",{id:"to_disk"},"to","_","disk"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def to_disk(\n |     self,\n |     path: Union[str, Path],\n |     *,\n |     exclude: Iterable[str] = SimpleFrozenList()\n | ) -> None\n")),(0,i.kt)("p",null,"Serialises the tagger to the given ",(0,i.kt)("inlineCode",{parentName:"p"},"path"),"."),(0,i.kt)("h4",{id:"to_disk.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#to_disk.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"path")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"Union[str, Path]")," ",(0,i.kt)("br",null),"\nPath to a direcotry. Path may be either string or ",(0,i.kt)("inlineCode",{parentName:"p"},"Path"),"-like\nobject. If the directory does not exist it attempts to create a\ndirectory at the given ",(0,i.kt)("inlineCode",{parentName:"p"},"path"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"exclude")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"Iterable[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleFrozenList()"),") ",(0,i.kt)("br",null),"\nThis currently does not do anything, please ignore it."))),(0,i.kt)("h4",{id:"to_disk.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#to_disk.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"None")," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"to_disk.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#to_disk.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pathlib import Path\nfrom tempfile import TemporaryDirectory\nfrom pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.spacy_api.taggers.rule_based import RuleBasedTagger\nrules = [SingleWordRule({'example|noun': ['Z1']}, {})]\nranker = ContextualRuleBasedRanker(*ContextualRuleBasedRanker.get_construction_arguments(rules))\ntagger = RuleBasedTagger()\ntagger.initialize(rules=rules, ranker=ranker)\nwith TemporaryDirectory() as temp_dir:\n    _ = tagger.to_disk(temp_dir)\n\n")),(0,i.kt)("a",{id:"pymusas.spacy_api.taggers.rule_based.RuleBasedTagger.from_disk"}),(0,i.kt)("h3",{id:"from_disk"},"from","_","disk"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class RuleBasedTagger(spacy.pipeline.pipe.Pipe):\n | ...\n | def from_disk(\n |     self,\n |     path: Union[str, Path],\n |     *,\n |     exclude: Iterable[str] = SimpleFrozenList()\n | ) -> "RuleBasedTagger"\n')),(0,i.kt)("p",null,"Loads the tagger from the given ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," in place and returns it."),(0,i.kt)("h4",{id:"from_disk.parameters"},"Parameters",(0,i.kt)("a",{className:"headerlink",href:"#from_disk.parameters",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"path")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"Union[str, Path]")," ",(0,i.kt)("br",null),"\nPath to an existing direcotry. Path may be either string or\n",(0,i.kt)("inlineCode",{parentName:"p"},"Path"),"-like object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"exclude")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"Iterable[str]"),", optional (default = ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleFrozenList()"),") ",(0,i.kt)("br",null),"\nThis currently does not do anything, please ignore it."))),(0,i.kt)("h4",{id:"from_disk.returns"},"Returns",(0,i.kt)("a",{className:"headerlink",href:"#from_disk.returns",title:"Permanent link"},"\xb6")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rulebasedtagger"},(0,i.kt)("inlineCode",{parentName:"a"},"RuleBasedTagger"))," ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"from_disk.examples"},"Examples",(0,i.kt)("a",{className:"headerlink",href:"#from_disk.examples",title:"Permanent link"},"\xb6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pathlib import Path\nfrom tempfile import TemporaryDirectory\nfrom pymusas.rankers.lexicon_entry import ContextualRuleBasedRanker\nfrom pymusas.taggers.rules.single_word import SingleWordRule\nfrom pymusas.spacy_api.taggers.rule_based import RuleBasedTagger\nrules = [SingleWordRule({'example|noun': ['Z1']}, {})]\nranker = ContextualRuleBasedRanker(*ContextualRuleBasedRanker.get_construction_arguments(rules))\ntagger = RuleBasedTagger()\ntagger.initialize(rules=rules, ranker=ranker)\n# Create an empty second tagger\ntagger_2 = RuleBasedTagger()\nassert tagger_2.rules is None\nwith TemporaryDirectory() as temp_dir:\n    _ = tagger.to_disk(temp_dir)\n    _ = tagger_2.from_disk(temp_dir)\n\nassert tagger_2.rules is not None\nassert tagger_2.rules == tagger.rules\n")))}d.isMDXComponent=!0}}]);